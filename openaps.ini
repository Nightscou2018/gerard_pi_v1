[vendor "openapscontrib.timezones"]
path = .
module = openapscontrib.timezones

[device "pump"]
vendor = openaps.vendors.medtronic
extra = pump.ini

[device "cgm"]
vendor = openaps.vendors.dexcom
extra = cgm.ini

[device "ns-glucose"]
vendor = openaps.vendors.process
extra = ns-glucose.ini

[device "oref0"]
vendor = openaps.vendors.process
extra = oref0.ini

[device "iob"]
vendor = openaps.vendors.process
extra = iob.ini

[device "meal"]
vendor = openaps.vendors.process
extra = meal.ini

[device "get-profile"]
vendor = openaps.vendors.process
extra = get-profile.ini

[device "determine-basal"]
vendor = openaps.vendors.process
extra = determine-basal.ini

[device "pebble"]
vendor = openaps.vendors.process
extra = pebble.ini

[device "tz"]
vendor = openapscontrib.timezones
extra = tz.ini

[report "monitor/cgm-glucose.json"]
device = cgm
count = 5
use = iter_glucose
reporter = JSON

[report "monitor/ns-glucose.json"]
device = ns-glucose
remainder = 
use = shell
json_default = True
reporter = text

[report "settings/model.json"]
device = pump
use = model
reporter = JSON

[report "monitor/clock.json"]
device = pump
use = read_clock
reporter = JSON

[report "monitor/clock-zoned.json"]
use = clock
reporter = JSON
astimezone = False
date = None
adjust = missing
input = monitor/clock.json
device = tz
timezone = 

[report "monitor/temp_basal.json"]
device = pump
use = read_temp_basal
reporter = JSON

[report "monitor/reservoir.json"]
device = pump
use = reservoir
reporter = JSON

[report "monitor/battery.json"]
device = pump
use = read_battery_status
reporter = JSON

[report "monitor/status.json"]
device = pump
use = status
reporter = JSON

[report "monitor/pumphistory.json"]
device = pump
hours = 6.0
use = iter_pump_hours
reporter = JSON

[report "monitor/pumphistory-zoned.json"]
use = rezone
reporter = JSON
astimezone = False
date = timestamp dateString start_at end_at created_at
adjust = missing
input = monitor/pumphistory.json
device = tz
timezone = 

[report "monitor/iob.json"]
profile = settings/profile.json
use = shell
clock = monitor/clock-zoned.json
reporter = text
json_default = True
pumphistory = monitor/pumphistory-zoned.json
device = iob
remainder = 

[report "monitor/meal.json"]
profile = settings/profile.json
use = shell
clock = monitor/clock-zoned.json
reporter = text
json_default = True
pumphistory = monitor/pumphistory-zoned.json
device = meal
remainder = 

[report "settings/bg_targets.json"]
device = pump
use = read_bg_targets
reporter = JSON

[report "settings/insulin_sensitivities.json"]
device = pump
use = read_insulin_sensitivities
reporter = JSON

[report "settings/carb_ratios.json"]
device = pump
use = read_carb_ratios
reporter = JSON

[report "settings/basal_profile.json"]
device = pump
use = read_selected_basal_profile
reporter = JSON

[report "settings/settings.json"]
device = pump
use = read_settings
reporter = JSON

[report "settings/profile.json"]
use = shell
bg_targets = settings/bg_targets.json
settings = settings/settings.json
basal_profile = settings/basal_profile.json
reporter = text
json_default = True
carb_ratios = settings/carb_ratios.json
max_iob = max_iob.json
device = get-profile
remainder = 
isf = settings/insulin_sensitivities.json

[report "enact/suggested.json"]
profile = settings/profile.json
use = shell
temp_basal = monitor/temp_basal.json
reporter = text
json_default = True
iob = monitor/iob.json
device = determine-basal
offline = online
remainder = 
meal = monitor/meal.json
glucose = monitor/glucose.json

[report "enact/enacted.json"]
device = pump
input = enact/suggested.json
use = set_temp_basal
reporter = JSON

[report "upload/pebble.json"]
suggested = enact/suggested.json
use = shell
temp_basal = monitor/temp_basal.json
reporter = text
basal_profile = settings/basal_profile.json
json_default = True
device = pebble
glucose = monitor/glucose.json
remainder = 
iob = monitor/iob.json
enacted = enact/enacted.json

[alias]
invoke = report invoke
preflight = ! bash -c "rm -f monitor/clock.json && echo -n \"PREFLIGHT \" && openaps report invoke monitor/clock.json 2>/dev/null >/dev/null && grep -q T monitor/clock.json && echo OK || ( ( mm-stick warmup 2>&1 || sudo oref0-reset-usb ) | egrep -v \"^  \"; echo FAIL; openaps get-bg; sleep 120; exit 1 )"

